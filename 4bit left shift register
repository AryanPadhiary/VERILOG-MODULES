//verilog
module shift_register_4bit (
    input wire clk,
    input wire reset,
    input wire shift_in,
    output reg [3:0] q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 4'b0000;
        else
            q <= {q[2:0], shift_in};
    end
endmodule
//testbench
module tb_shift_register_4bit;
    reg clk;
    reg reset;
    reg shift_in;
    wire [3:0] q;
    
    // Instantiate the shift register
    shift_register_4bit uut (
        .clk(clk),
        .reset(reset),
        .shift_in(shift_in),
        .q(q)
    );
    
    // Clock generation
    always #5 clk = ~clk;
    
    // Testbench code
    initial begin
        // Initialize inputs
        clk = 0;
        reset = 1;
        shift_in = 0;
        
        // Apply reset
        #10 reset = 0;
        
        // Apply some test values to shift_in
        #10 shift_in = 1;
        #10 shift_in = 0;
        #10 shift_in = 1;
        #10 shift_in = 1;
        #10 shift_in = 0;
        #10 shift_in = 0;
        #10 shift_in = 1;
        #10 shift_in = 1;
        
        // Apply reset again
        #10 reset = 1;
        #10 reset = 0;
        
        // Continue with test values
        #10 shift_in = 1;
        #10 shift_in = 0;
        
        // End simulation
        #50 $stop;
    end
    
    // Monitor output
    initial begin
        $monitor("Time = %0d, clk = %b, reset = %b, shift_in = %b, q = %b", $time, clk, reset, shift_in, q);
    end
endmodule
